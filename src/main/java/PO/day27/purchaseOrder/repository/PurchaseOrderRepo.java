package PO.day27.purchaseOrder.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;

import PO.day27.purchaseOrder.model.PurchaseOrder;

import static PO.day27.purchaseOrder.repository.Queries.*;

import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.sql.Statement;

@Repository
public class PurchaseOrderRepo {

    @Autowired
    private JdbcTemplate template;

    public Integer createPurchaseOrder(PurchaseOrder po) {
        int added = template.update(SQL_INSERT_PO,
                    po.getName(),
                    po.getEmail());
        
        SqlRowSet result = template.queryForRowSet(SQL_GET_ORDER_ID, po.getName());
        result.next();
        return result.getInt("order_id");
    }

    /*
    faster method to just directly get the autogenerated order_id out when inserting the purchase order -> returns order_id that we can use to insert in line_items

    PreparedStatement: prepares the SQL statement
    ps.setString must be according to the type
    Statement. -> The object used for executing a static SQL statement and returning the results it produces

    BigInteger basically is like Integer but can hold bigger value(?)

    public Integer insertPurchaseOrder(PurchaseOrder po) {
        KeyHolder keyHolder = new GeneratedKeyHolder();

        template.update(conn -> {
            PreparedStatement ps = conn.prepareStatement(SQL_INSERT_PO,
                Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, po.getName());
            ps.setString(2, po.getEmail());
        }, keyHolder);

        BigInteger bigInt = (BigInteger) keyHolder.getKey();

        return bigInt.intValue();
    }
    */
    
}
